// Generated by Dagger (https://dagger.dev).
package com.example.tutorial5_1dagger_android.di;

import android.content.Context;
import com.example.tutorial5_1dagger_android.DummyDependency;
import dagger.internal.Factory;
import dagger.internal.Preconditions;
import javax.inject.Provider;

@SuppressWarnings({
    "unchecked",
    "rawtypes"
})
public final class AppModule_Companion_ProvideDummyDependencyFactory implements Factory<DummyDependency> {
  private final AppModule.Companion module;

  private final Provider<Context> contextProvider;

  public AppModule_Companion_ProvideDummyDependencyFactory(AppModule.Companion module,
      Provider<Context> contextProvider) {
    this.module = module;
    this.contextProvider = contextProvider;
  }

  @Override
  public DummyDependency get() {
    return provideDummyDependency(module, contextProvider.get());
  }

  public static AppModule_Companion_ProvideDummyDependencyFactory create(AppModule.Companion module,
      Provider<Context> contextProvider) {
    return new AppModule_Companion_ProvideDummyDependencyFactory(module, contextProvider);
  }

  public static DummyDependency provideDummyDependency(AppModule.Companion instance,
      Context context) {
    return Preconditions.checkNotNull(instance.provideDummyDependency(context), "Cannot return null from a non-@Nullable @Provides method");
  }
}
