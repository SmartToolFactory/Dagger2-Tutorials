// Generated by Dagger (https://dagger.dev).
package com.example.android.architecture.blueprints.todoapp.di;

import android.app.Application;
import com.example.android.architecture.blueprints.todoapp.ToDoApplication;
import com.example.android.architecture.blueprints.todoapp.ToDoApplication_MembersInjector;
import com.example.android.architecture.blueprints.todoapp.addedittask.AddEditTaskActivity;
import com.example.android.architecture.blueprints.todoapp.addedittask.AddEditTaskActivity_MembersInjector;
import com.example.android.architecture.blueprints.todoapp.addedittask.AddEditTaskContract;
import com.example.android.architecture.blueprints.todoapp.addedittask.AddEditTaskFragment;
import com.example.android.architecture.blueprints.todoapp.addedittask.AddEditTaskFragment_Factory;
import com.example.android.architecture.blueprints.todoapp.addedittask.AddEditTaskFragment_MembersInjector;
import com.example.android.architecture.blueprints.todoapp.addedittask.AddEditTaskModule_AddEditTaskFragment;
import com.example.android.architecture.blueprints.todoapp.addedittask.AddEditTaskModule_ProvideStatusDataMissingFactory;
import com.example.android.architecture.blueprints.todoapp.addedittask.AddEditTaskModule_ProvideTaskIdFactory;
import com.example.android.architecture.blueprints.todoapp.addedittask.AddEditTaskPresenter_Factory;
import com.example.android.architecture.blueprints.todoapp.data.FakeTasksRemoteDataSource_Factory;
import com.example.android.architecture.blueprints.todoapp.data.source.TasksDataSource;
import com.example.android.architecture.blueprints.todoapp.data.source.TasksRepository;
import com.example.android.architecture.blueprints.todoapp.data.source.TasksRepositoryModule_ProvideAppExecutorsFactory;
import com.example.android.architecture.blueprints.todoapp.data.source.TasksRepositoryModule_ProvideDbFactory;
import com.example.android.architecture.blueprints.todoapp.data.source.TasksRepositoryModule_ProvideTasksDaoFactory;
import com.example.android.architecture.blueprints.todoapp.data.source.TasksRepository_Factory;
import com.example.android.architecture.blueprints.todoapp.data.source.local.TasksDao;
import com.example.android.architecture.blueprints.todoapp.data.source.local.TasksLocalDataSource;
import com.example.android.architecture.blueprints.todoapp.data.source.local.TasksLocalDataSource_Factory;
import com.example.android.architecture.blueprints.todoapp.data.source.local.ToDoDatabase;
import com.example.android.architecture.blueprints.todoapp.statistics.StatisticsActivity;
import com.example.android.architecture.blueprints.todoapp.statistics.StatisticsActivity_MembersInjector;
import com.example.android.architecture.blueprints.todoapp.statistics.StatisticsContract;
import com.example.android.architecture.blueprints.todoapp.statistics.StatisticsFragment;
import com.example.android.architecture.blueprints.todoapp.statistics.StatisticsFragment_Factory;
import com.example.android.architecture.blueprints.todoapp.statistics.StatisticsFragment_MembersInjector;
import com.example.android.architecture.blueprints.todoapp.statistics.StatisticsModule_StatisticsFragment;
import com.example.android.architecture.blueprints.todoapp.statistics.StatisticsPresenter_Factory;
import com.example.android.architecture.blueprints.todoapp.taskdetail.TaskDetailActivity;
import com.example.android.architecture.blueprints.todoapp.taskdetail.TaskDetailActivity_MembersInjector;
import com.example.android.architecture.blueprints.todoapp.taskdetail.TaskDetailContract;
import com.example.android.architecture.blueprints.todoapp.taskdetail.TaskDetailFragment;
import com.example.android.architecture.blueprints.todoapp.taskdetail.TaskDetailFragment_Factory;
import com.example.android.architecture.blueprints.todoapp.taskdetail.TaskDetailFragment_MembersInjector;
import com.example.android.architecture.blueprints.todoapp.taskdetail.TaskDetailPresenterModule_ProvideTaskIdFactory;
import com.example.android.architecture.blueprints.todoapp.taskdetail.TaskDetailPresenterModule_TaskDetailFragment;
import com.example.android.architecture.blueprints.todoapp.taskdetail.TaskDetailPresenter_Factory;
import com.example.android.architecture.blueprints.todoapp.tasks.TasksActivity;
import com.example.android.architecture.blueprints.todoapp.tasks.TasksActivity_MembersInjector;
import com.example.android.architecture.blueprints.todoapp.tasks.TasksContract;
import com.example.android.architecture.blueprints.todoapp.tasks.TasksFragment;
import com.example.android.architecture.blueprints.todoapp.tasks.TasksFragment_Factory;
import com.example.android.architecture.blueprints.todoapp.tasks.TasksFragment_MembersInjector;
import com.example.android.architecture.blueprints.todoapp.tasks.TasksModule_TasksFragment;
import com.example.android.architecture.blueprints.todoapp.tasks.TasksPresenter_Factory;
import com.example.android.architecture.blueprints.todoapp.util.AppExecutors;
import com.google.common.collect.ImmutableMap;
import dagger.android.AndroidInjector;
import dagger.android.DaggerApplication_MembersInjector;
import dagger.android.DispatchingAndroidInjector;
import dagger.android.DispatchingAndroidInjector_Factory;
import dagger.android.support.DaggerAppCompatActivity_MembersInjector;
import dagger.android.support.DaggerFragment_MembersInjector;
import dagger.internal.DoubleCheck;
import dagger.internal.InstanceFactory;
import dagger.internal.MapFactory;
import dagger.internal.MapProviderFactory;
import dagger.internal.Preconditions;
import java.util.Map;
import javax.inject.Provider;

@SuppressWarnings({
    "unchecked",
    "rawtypes"
})
public final class DaggerAppComponent implements AppComponent {
  private Provider<ActivityBindingModule_TasksActivity.TasksActivitySubcomponent.Factory> tasksActivitySubcomponentFactoryProvider;

  private Provider<ActivityBindingModule_AddEditTaskActivity.AddEditTaskActivitySubcomponent.Factory> addEditTaskActivitySubcomponentFactoryProvider;

  private Provider<ActivityBindingModule_StatisticsActivity.StatisticsActivitySubcomponent.Factory> statisticsActivitySubcomponentFactoryProvider;

  private Provider<ActivityBindingModule_TaskDetailActivity.TaskDetailActivitySubcomponent.Factory> taskDetailActivitySubcomponentFactoryProvider;

  private Provider<TasksDataSource> provideTasksRemoteDataSourceProvider;

  private Provider<AppExecutors> provideAppExecutorsProvider;

  private Provider<Application> applicationProvider;

  private Provider<ToDoDatabase> provideDbProvider;

  private Provider<TasksDao> provideTasksDaoProvider;

  private Provider<TasksLocalDataSource> tasksLocalDataSourceProvider;

  private Provider<TasksRepository> tasksRepositoryProvider;

  private DaggerAppComponent(Application applicationParam) {

    initialize(applicationParam);
  }

  public static AppComponent.Builder builder() {
    return new Builder();
  }

  private Map<Class<?>, Provider<AndroidInjector.Factory<?>>> getMapOfClassOfAndProviderOfAndroidInjectorFactoryOf(
      ) {
    return ImmutableMap.<Class<?>, Provider<AndroidInjector.Factory<?>>>of(TasksActivity.class, (Provider) tasksActivitySubcomponentFactoryProvider, AddEditTaskActivity.class, (Provider) addEditTaskActivitySubcomponentFactoryProvider, StatisticsActivity.class, (Provider) statisticsActivitySubcomponentFactoryProvider, TaskDetailActivity.class, (Provider) taskDetailActivitySubcomponentFactoryProvider);}

  private DispatchingAndroidInjector<Object> getDispatchingAndroidInjectorOfObject() {
    return DispatchingAndroidInjector_Factory.newInstance(getMapOfClassOfAndProviderOfAndroidInjectorFactoryOf(), ImmutableMap.<String, Provider<AndroidInjector.Factory<?>>>of());}

  @SuppressWarnings("unchecked")
  private void initialize(final Application applicationParam) {
    this.tasksActivitySubcomponentFactoryProvider = new Provider<ActivityBindingModule_TasksActivity.TasksActivitySubcomponent.Factory>() {
      @Override
      public ActivityBindingModule_TasksActivity.TasksActivitySubcomponent.Factory get() {
        return new TasksActivitySubcomponentFactory();}
    };
    this.addEditTaskActivitySubcomponentFactoryProvider = new Provider<ActivityBindingModule_AddEditTaskActivity.AddEditTaskActivitySubcomponent.Factory>() {
      @Override
      public ActivityBindingModule_AddEditTaskActivity.AddEditTaskActivitySubcomponent.Factory get(
          ) {
        return new AddEditTaskActivitySubcomponentFactory();}
    };
    this.statisticsActivitySubcomponentFactoryProvider = new Provider<ActivityBindingModule_StatisticsActivity.StatisticsActivitySubcomponent.Factory>() {
      @Override
      public ActivityBindingModule_StatisticsActivity.StatisticsActivitySubcomponent.Factory get() {
        return new StatisticsActivitySubcomponentFactory();}
    };
    this.taskDetailActivitySubcomponentFactoryProvider = new Provider<ActivityBindingModule_TaskDetailActivity.TaskDetailActivitySubcomponent.Factory>() {
      @Override
      public ActivityBindingModule_TaskDetailActivity.TaskDetailActivitySubcomponent.Factory get() {
        return new TaskDetailActivitySubcomponentFactory();}
    };
    this.provideTasksRemoteDataSourceProvider = DoubleCheck.provider((Provider) FakeTasksRemoteDataSource_Factory.create());
    this.provideAppExecutorsProvider = DoubleCheck.provider(TasksRepositoryModule_ProvideAppExecutorsFactory.create());
    this.applicationProvider = InstanceFactory.create(applicationParam);
    this.provideDbProvider = DoubleCheck.provider(TasksRepositoryModule_ProvideDbFactory.create(applicationProvider));
    this.provideTasksDaoProvider = DoubleCheck.provider(TasksRepositoryModule_ProvideTasksDaoFactory.create(provideDbProvider));
    this.tasksLocalDataSourceProvider = DoubleCheck.provider(TasksLocalDataSource_Factory.create(provideAppExecutorsProvider, provideTasksDaoProvider));
    this.tasksRepositoryProvider = DoubleCheck.provider(TasksRepository_Factory.create(provideTasksRemoteDataSourceProvider, (Provider) tasksLocalDataSourceProvider));
  }

  @Override
  public void inject(ToDoApplication arg0) {
    injectToDoApplication(arg0);}

  @Override
  public TasksRepository getTasksRepository() {
    return tasksRepositoryProvider.get();}

  private ToDoApplication injectToDoApplication(ToDoApplication instance) {
    DaggerApplication_MembersInjector.injectAndroidInjector(instance, getDispatchingAndroidInjectorOfObject());
    ToDoApplication_MembersInjector.injectTasksRepository(instance, tasksRepositoryProvider.get());
    return instance;
  }

  private static final class Builder implements AppComponent.Builder {
    private Application application;

    @Override
    public Builder application(Application application) {
      this.application = Preconditions.checkNotNull(application);
      return this;
    }

    @Override
    public AppComponent build() {
      Preconditions.checkBuilderRequirement(application, Application.class);
      return new DaggerAppComponent(application);
    }
  }

  private final class TasksActivitySubcomponentFactory implements ActivityBindingModule_TasksActivity.TasksActivitySubcomponent.Factory {
    @Override
    public ActivityBindingModule_TasksActivity.TasksActivitySubcomponent create(
        TasksActivity arg0) {
      Preconditions.checkNotNull(arg0);
      return new TasksActivitySubcomponentImpl(arg0);
    }
  }

  private final class TasksActivitySubcomponentImpl implements ActivityBindingModule_TasksActivity.TasksActivitySubcomponent {
    private Provider<TasksModule_TasksFragment.TasksFragmentSubcomponent.Factory> tasksFragmentSubcomponentFactoryProvider;

    @SuppressWarnings("rawtypes")
    private Provider tasksPresenterProvider;

    private Provider<Map<Class<?>, Provider<AndroidInjector.Factory<?>>>> mapOfClassOfAndProviderOfAndroidInjectorFactoryOfProvider;

    private Provider<DispatchingAndroidInjector<Object>> dispatchingAndroidInjectorProvider;

    private Provider<TasksFragment> tasksFragmentProvider;

    private TasksActivitySubcomponentImpl(TasksActivity arg0) {

      initialize(arg0);
    }

    private Map<Class<?>, Provider<AndroidInjector.Factory<?>>> getMapOfClassOfAndProviderOfAndroidInjectorFactoryOf(
        ) {
      return ImmutableMap.<Class<?>, Provider<AndroidInjector.Factory<?>>>of(TasksActivity.class, (Provider) DaggerAppComponent.this.tasksActivitySubcomponentFactoryProvider, AddEditTaskActivity.class, (Provider) DaggerAppComponent.this.addEditTaskActivitySubcomponentFactoryProvider, StatisticsActivity.class, (Provider) DaggerAppComponent.this.statisticsActivitySubcomponentFactoryProvider, TaskDetailActivity.class, (Provider) DaggerAppComponent.this.taskDetailActivitySubcomponentFactoryProvider, TasksFragment.class, (Provider) tasksFragmentSubcomponentFactoryProvider);}

    private DispatchingAndroidInjector<Object> getDispatchingAndroidInjectorOfObject() {
      return DispatchingAndroidInjector_Factory.newInstance(getMapOfClassOfAndProviderOfAndroidInjectorFactoryOf(), ImmutableMap.<String, Provider<AndroidInjector.Factory<?>>>of());}

    @SuppressWarnings("unchecked")
    private void initialize(final TasksActivity arg0) {
      this.tasksFragmentSubcomponentFactoryProvider = new Provider<TasksModule_TasksFragment.TasksFragmentSubcomponent.Factory>() {
        @Override
        public TasksModule_TasksFragment.TasksFragmentSubcomponent.Factory get() {
          return new TasksFragmentSubcomponentFactory();}
      };
      this.tasksPresenterProvider = DoubleCheck.provider(TasksPresenter_Factory.create(DaggerAppComponent.this.tasksRepositoryProvider));
      this.mapOfClassOfAndProviderOfAndroidInjectorFactoryOfProvider = MapProviderFactory.<Class<?>, AndroidInjector.Factory<?>>builder(5).put(TasksActivity.class, (Provider) DaggerAppComponent.this.tasksActivitySubcomponentFactoryProvider).put(AddEditTaskActivity.class, (Provider) DaggerAppComponent.this.addEditTaskActivitySubcomponentFactoryProvider).put(StatisticsActivity.class, (Provider) DaggerAppComponent.this.statisticsActivitySubcomponentFactoryProvider).put(TaskDetailActivity.class, (Provider) DaggerAppComponent.this.taskDetailActivitySubcomponentFactoryProvider).put(TasksFragment.class, (Provider) tasksFragmentSubcomponentFactoryProvider).build();
      this.dispatchingAndroidInjectorProvider = DispatchingAndroidInjector_Factory.create(mapOfClassOfAndProviderOfAndroidInjectorFactoryOfProvider, MapFactory.<String, Provider<AndroidInjector.Factory<?>>>emptyMapProvider());
      this.tasksFragmentProvider = DoubleCheck.provider(TasksFragment_Factory.create(dispatchingAndroidInjectorProvider, tasksPresenterProvider));
    }

    @Override
    public void inject(TasksActivity arg0) {
      injectTasksActivity(arg0);}

    private TasksActivity injectTasksActivity(TasksActivity instance) {
      DaggerAppCompatActivity_MembersInjector.injectAndroidInjector(instance, getDispatchingAndroidInjectorOfObject());
      TasksActivity_MembersInjector.injectMTasksPresenter(instance, tasksPresenterProvider.get());
      TasksActivity_MembersInjector.injectTaskFragmentProvider(instance, DoubleCheck.lazy(tasksFragmentProvider));
      return instance;
    }

    private final class TasksFragmentSubcomponentFactory implements TasksModule_TasksFragment.TasksFragmentSubcomponent.Factory {
      @Override
      public TasksModule_TasksFragment.TasksFragmentSubcomponent create(TasksFragment arg0) {
        Preconditions.checkNotNull(arg0);
        return new TasksFragmentSubcomponentImpl(arg0);
      }
    }

    private final class TasksFragmentSubcomponentImpl implements TasksModule_TasksFragment.TasksFragmentSubcomponent {
      private TasksFragmentSubcomponentImpl(TasksFragment arg0) {

      }

      @Override
      public void inject(TasksFragment arg0) {
        injectTasksFragment(arg0);}

      private TasksFragment injectTasksFragment(TasksFragment instance) {
        DaggerFragment_MembersInjector.injectAndroidInjector(instance, TasksActivitySubcomponentImpl.this.getDispatchingAndroidInjectorOfObject());
        TasksFragment_MembersInjector.injectMPresenter(instance, (TasksContract.Presenter) TasksActivitySubcomponentImpl.this.tasksPresenterProvider.get());
        return instance;
      }
    }
  }

  private final class AddEditTaskActivitySubcomponentFactory implements ActivityBindingModule_AddEditTaskActivity.AddEditTaskActivitySubcomponent.Factory {
    @Override
    public ActivityBindingModule_AddEditTaskActivity.AddEditTaskActivitySubcomponent create(
        AddEditTaskActivity arg0) {
      Preconditions.checkNotNull(arg0);
      return new AddEditTaskActivitySubcomponentImpl(arg0);
    }
  }

  private final class AddEditTaskActivitySubcomponentImpl implements ActivityBindingModule_AddEditTaskActivity.AddEditTaskActivitySubcomponent {
    private Provider<AddEditTaskModule_AddEditTaskFragment.AddEditTaskFragmentSubcomponent.Factory> addEditTaskFragmentSubcomponentFactoryProvider;

    private Provider<AddEditTaskActivity> arg0Provider;

    private Provider<String> provideTaskIdProvider;

    private Provider<Boolean> provideStatusDataMissingProvider;

    @SuppressWarnings("rawtypes")
    private Provider addEditTaskPresenterProvider;

    private Provider<AddEditTaskContract.Presenter> taskPresenterProvider;

    private Provider<Map<Class<?>, Provider<AndroidInjector.Factory<?>>>> mapOfClassOfAndProviderOfAndroidInjectorFactoryOfProvider;

    private Provider<DispatchingAndroidInjector<Object>> dispatchingAndroidInjectorProvider;

    private Provider<AddEditTaskFragment> addEditTaskFragmentProvider;

    private AddEditTaskActivitySubcomponentImpl(AddEditTaskActivity arg0Param) {

      initialize(arg0Param);
    }

    private Map<Class<?>, Provider<AndroidInjector.Factory<?>>> getMapOfClassOfAndProviderOfAndroidInjectorFactoryOf(
        ) {
      return ImmutableMap.<Class<?>, Provider<AndroidInjector.Factory<?>>>of(TasksActivity.class, (Provider) DaggerAppComponent.this.tasksActivitySubcomponentFactoryProvider, AddEditTaskActivity.class, (Provider) DaggerAppComponent.this.addEditTaskActivitySubcomponentFactoryProvider, StatisticsActivity.class, (Provider) DaggerAppComponent.this.statisticsActivitySubcomponentFactoryProvider, TaskDetailActivity.class, (Provider) DaggerAppComponent.this.taskDetailActivitySubcomponentFactoryProvider, AddEditTaskFragment.class, (Provider) addEditTaskFragmentSubcomponentFactoryProvider);}

    private DispatchingAndroidInjector<Object> getDispatchingAndroidInjectorOfObject() {
      return DispatchingAndroidInjector_Factory.newInstance(getMapOfClassOfAndProviderOfAndroidInjectorFactoryOf(), ImmutableMap.<String, Provider<AndroidInjector.Factory<?>>>of());}

    @SuppressWarnings("unchecked")
    private void initialize(final AddEditTaskActivity arg0Param) {
      this.addEditTaskFragmentSubcomponentFactoryProvider = new Provider<AddEditTaskModule_AddEditTaskFragment.AddEditTaskFragmentSubcomponent.Factory>() {
        @Override
        public AddEditTaskModule_AddEditTaskFragment.AddEditTaskFragmentSubcomponent.Factory get() {
          return new AddEditTaskFragmentSubcomponentFactory();}
      };
      this.arg0Provider = InstanceFactory.create(arg0Param);
      this.provideTaskIdProvider = DoubleCheck.provider(AddEditTaskModule_ProvideTaskIdFactory.create(arg0Provider));
      this.provideStatusDataMissingProvider = DoubleCheck.provider(AddEditTaskModule_ProvideStatusDataMissingFactory.create(arg0Provider));
      this.addEditTaskPresenterProvider = AddEditTaskPresenter_Factory.create(provideTaskIdProvider, DaggerAppComponent.this.tasksRepositoryProvider, provideStatusDataMissingProvider);
      this.taskPresenterProvider = DoubleCheck.provider((Provider) addEditTaskPresenterProvider);
      this.mapOfClassOfAndProviderOfAndroidInjectorFactoryOfProvider = MapProviderFactory.<Class<?>, AndroidInjector.Factory<?>>builder(5).put(TasksActivity.class, (Provider) DaggerAppComponent.this.tasksActivitySubcomponentFactoryProvider).put(AddEditTaskActivity.class, (Provider) DaggerAppComponent.this.addEditTaskActivitySubcomponentFactoryProvider).put(StatisticsActivity.class, (Provider) DaggerAppComponent.this.statisticsActivitySubcomponentFactoryProvider).put(TaskDetailActivity.class, (Provider) DaggerAppComponent.this.taskDetailActivitySubcomponentFactoryProvider).put(AddEditTaskFragment.class, (Provider) addEditTaskFragmentSubcomponentFactoryProvider).build();
      this.dispatchingAndroidInjectorProvider = DispatchingAndroidInjector_Factory.create(mapOfClassOfAndProviderOfAndroidInjectorFactoryOfProvider, MapFactory.<String, Provider<AndroidInjector.Factory<?>>>emptyMapProvider());
      this.addEditTaskFragmentProvider = DoubleCheck.provider(AddEditTaskFragment_Factory.create(dispatchingAndroidInjectorProvider, taskPresenterProvider));
    }

    @Override
    public void inject(AddEditTaskActivity arg0) {
      injectAddEditTaskActivity(arg0);}

    private AddEditTaskActivity injectAddEditTaskActivity(AddEditTaskActivity instance) {
      DaggerAppCompatActivity_MembersInjector.injectAndroidInjector(instance, getDispatchingAndroidInjectorOfObject());
      AddEditTaskActivity_MembersInjector.injectMAddEditTasksPresenter(instance, taskPresenterProvider.get());
      AddEditTaskActivity_MembersInjector.injectMFragment(instance, addEditTaskFragmentProvider.get());
      AddEditTaskActivity_MembersInjector.injectMTaskId(instance, provideTaskIdProvider.get());
      return instance;
    }

    private final class AddEditTaskFragmentSubcomponentFactory implements AddEditTaskModule_AddEditTaskFragment.AddEditTaskFragmentSubcomponent.Factory {
      @Override
      public AddEditTaskModule_AddEditTaskFragment.AddEditTaskFragmentSubcomponent create(
          AddEditTaskFragment arg0) {
        Preconditions.checkNotNull(arg0);
        return new AddEditTaskFragmentSubcomponentImpl(arg0);
      }
    }

    private final class AddEditTaskFragmentSubcomponentImpl implements AddEditTaskModule_AddEditTaskFragment.AddEditTaskFragmentSubcomponent {
      private AddEditTaskFragmentSubcomponentImpl(AddEditTaskFragment arg0) {

      }

      @Override
      public void inject(AddEditTaskFragment arg0) {
        injectAddEditTaskFragment(arg0);}

      private AddEditTaskFragment injectAddEditTaskFragment(AddEditTaskFragment instance) {
        DaggerFragment_MembersInjector.injectAndroidInjector(instance, AddEditTaskActivitySubcomponentImpl.this.getDispatchingAndroidInjectorOfObject());
        AddEditTaskFragment_MembersInjector.injectMPresenter(instance, AddEditTaskActivitySubcomponentImpl.this.taskPresenterProvider.get());
        return instance;
      }
    }
  }

  private final class StatisticsActivitySubcomponentFactory implements ActivityBindingModule_StatisticsActivity.StatisticsActivitySubcomponent.Factory {
    @Override
    public ActivityBindingModule_StatisticsActivity.StatisticsActivitySubcomponent create(
        StatisticsActivity arg0) {
      Preconditions.checkNotNull(arg0);
      return new StatisticsActivitySubcomponentImpl(arg0);
    }
  }

  private final class StatisticsActivitySubcomponentImpl implements ActivityBindingModule_StatisticsActivity.StatisticsActivitySubcomponent {
    private Provider<StatisticsModule_StatisticsFragment.StatisticsFragmentSubcomponent.Factory> statisticsFragmentSubcomponentFactoryProvider;

    private Provider<Map<Class<?>, Provider<AndroidInjector.Factory<?>>>> mapOfClassOfAndProviderOfAndroidInjectorFactoryOfProvider;

    private Provider<DispatchingAndroidInjector<Object>> dispatchingAndroidInjectorProvider;

    @SuppressWarnings("rawtypes")
    private Provider statisticsPresenterProvider;

    private Provider<StatisticsContract.Presenter> statitsticsPresenterProvider;

    private Provider<StatisticsFragment> statisticsFragmentProvider;

    private StatisticsActivitySubcomponentImpl(StatisticsActivity arg0) {

      initialize(arg0);
    }

    private Map<Class<?>, Provider<AndroidInjector.Factory<?>>> getMapOfClassOfAndProviderOfAndroidInjectorFactoryOf(
        ) {
      return ImmutableMap.<Class<?>, Provider<AndroidInjector.Factory<?>>>of(TasksActivity.class, (Provider) DaggerAppComponent.this.tasksActivitySubcomponentFactoryProvider, AddEditTaskActivity.class, (Provider) DaggerAppComponent.this.addEditTaskActivitySubcomponentFactoryProvider, StatisticsActivity.class, (Provider) DaggerAppComponent.this.statisticsActivitySubcomponentFactoryProvider, TaskDetailActivity.class, (Provider) DaggerAppComponent.this.taskDetailActivitySubcomponentFactoryProvider, StatisticsFragment.class, (Provider) statisticsFragmentSubcomponentFactoryProvider);}

    private DispatchingAndroidInjector<Object> getDispatchingAndroidInjectorOfObject() {
      return DispatchingAndroidInjector_Factory.newInstance(getMapOfClassOfAndProviderOfAndroidInjectorFactoryOf(), ImmutableMap.<String, Provider<AndroidInjector.Factory<?>>>of());}

    private Object getStatisticsPresenter() {
      return StatisticsPresenter_Factory.newInstance(DaggerAppComponent.this.tasksRepositoryProvider.get());}

    @SuppressWarnings("unchecked")
    private void initialize(final StatisticsActivity arg0) {
      this.statisticsFragmentSubcomponentFactoryProvider = new Provider<StatisticsModule_StatisticsFragment.StatisticsFragmentSubcomponent.Factory>() {
        @Override
        public StatisticsModule_StatisticsFragment.StatisticsFragmentSubcomponent.Factory get() {
          return new StatisticsFragmentSubcomponentFactory();}
      };
      this.mapOfClassOfAndProviderOfAndroidInjectorFactoryOfProvider = MapProviderFactory.<Class<?>, AndroidInjector.Factory<?>>builder(5).put(TasksActivity.class, (Provider) DaggerAppComponent.this.tasksActivitySubcomponentFactoryProvider).put(AddEditTaskActivity.class, (Provider) DaggerAppComponent.this.addEditTaskActivitySubcomponentFactoryProvider).put(StatisticsActivity.class, (Provider) DaggerAppComponent.this.statisticsActivitySubcomponentFactoryProvider).put(TaskDetailActivity.class, (Provider) DaggerAppComponent.this.taskDetailActivitySubcomponentFactoryProvider).put(StatisticsFragment.class, (Provider) statisticsFragmentSubcomponentFactoryProvider).build();
      this.dispatchingAndroidInjectorProvider = DispatchingAndroidInjector_Factory.create(mapOfClassOfAndProviderOfAndroidInjectorFactoryOfProvider, MapFactory.<String, Provider<AndroidInjector.Factory<?>>>emptyMapProvider());
      this.statisticsPresenterProvider = StatisticsPresenter_Factory.create(DaggerAppComponent.this.tasksRepositoryProvider);
      this.statitsticsPresenterProvider = DoubleCheck.provider((Provider) statisticsPresenterProvider);
      this.statisticsFragmentProvider = DoubleCheck.provider(StatisticsFragment_Factory.create(dispatchingAndroidInjectorProvider, statitsticsPresenterProvider));
    }

    @Override
    public void inject(StatisticsActivity arg0) {
      injectStatisticsActivity(arg0);}

    private StatisticsActivity injectStatisticsActivity(StatisticsActivity instance) {
      DaggerAppCompatActivity_MembersInjector.injectAndroidInjector(instance, getDispatchingAndroidInjectorOfObject());
      StatisticsActivity_MembersInjector.injectMStatiticsPresenter(instance, getStatisticsPresenter());
      StatisticsActivity_MembersInjector.injectFragment(instance, statisticsFragmentProvider.get());
      return instance;
    }

    private final class StatisticsFragmentSubcomponentFactory implements StatisticsModule_StatisticsFragment.StatisticsFragmentSubcomponent.Factory {
      @Override
      public StatisticsModule_StatisticsFragment.StatisticsFragmentSubcomponent create(
          StatisticsFragment arg0) {
        Preconditions.checkNotNull(arg0);
        return new StatisticsFragmentSubcomponentImpl(arg0);
      }
    }

    private final class StatisticsFragmentSubcomponentImpl implements StatisticsModule_StatisticsFragment.StatisticsFragmentSubcomponent {
      private StatisticsFragmentSubcomponentImpl(StatisticsFragment arg0) {

      }

      @Override
      public void inject(StatisticsFragment arg0) {
        injectStatisticsFragment(arg0);}

      private StatisticsFragment injectStatisticsFragment(StatisticsFragment instance) {
        DaggerFragment_MembersInjector.injectAndroidInjector(instance, StatisticsActivitySubcomponentImpl.this.getDispatchingAndroidInjectorOfObject());
        StatisticsFragment_MembersInjector.injectMPresenter(instance, StatisticsActivitySubcomponentImpl.this.statitsticsPresenterProvider.get());
        return instance;
      }
    }
  }

  private final class TaskDetailActivitySubcomponentFactory implements ActivityBindingModule_TaskDetailActivity.TaskDetailActivitySubcomponent.Factory {
    @Override
    public ActivityBindingModule_TaskDetailActivity.TaskDetailActivitySubcomponent create(
        TaskDetailActivity arg0) {
      Preconditions.checkNotNull(arg0);
      return new TaskDetailActivitySubcomponentImpl(arg0);
    }
  }

  private final class TaskDetailActivitySubcomponentImpl implements ActivityBindingModule_TaskDetailActivity.TaskDetailActivitySubcomponent {
    private Provider<TaskDetailPresenterModule_TaskDetailFragment.TaskDetailFragmentSubcomponent.Factory> taskDetailFragmentSubcomponentFactoryProvider;

    private Provider<Map<Class<?>, Provider<AndroidInjector.Factory<?>>>> mapOfClassOfAndProviderOfAndroidInjectorFactoryOfProvider;

    private Provider<DispatchingAndroidInjector<Object>> dispatchingAndroidInjectorProvider;

    private Provider<TaskDetailActivity> arg0Provider;

    private Provider<String> provideTaskIdProvider;

    @SuppressWarnings("rawtypes")
    private Provider taskDetailPresenterProvider;

    private Provider<TaskDetailContract.Presenter> statitsticsPresenterProvider;

    private Provider<TaskDetailFragment> taskDetailFragmentProvider;

    private TaskDetailActivitySubcomponentImpl(TaskDetailActivity arg0Param) {

      initialize(arg0Param);
    }

    private Map<Class<?>, Provider<AndroidInjector.Factory<?>>> getMapOfClassOfAndProviderOfAndroidInjectorFactoryOf(
        ) {
      return ImmutableMap.<Class<?>, Provider<AndroidInjector.Factory<?>>>of(TasksActivity.class, (Provider) DaggerAppComponent.this.tasksActivitySubcomponentFactoryProvider, AddEditTaskActivity.class, (Provider) DaggerAppComponent.this.addEditTaskActivitySubcomponentFactoryProvider, StatisticsActivity.class, (Provider) DaggerAppComponent.this.statisticsActivitySubcomponentFactoryProvider, TaskDetailActivity.class, (Provider) DaggerAppComponent.this.taskDetailActivitySubcomponentFactoryProvider, TaskDetailFragment.class, (Provider) taskDetailFragmentSubcomponentFactoryProvider);}

    private DispatchingAndroidInjector<Object> getDispatchingAndroidInjectorOfObject() {
      return DispatchingAndroidInjector_Factory.newInstance(getMapOfClassOfAndProviderOfAndroidInjectorFactoryOf(), ImmutableMap.<String, Provider<AndroidInjector.Factory<?>>>of());}

    @SuppressWarnings("unchecked")
    private void initialize(final TaskDetailActivity arg0Param) {
      this.taskDetailFragmentSubcomponentFactoryProvider = new Provider<TaskDetailPresenterModule_TaskDetailFragment.TaskDetailFragmentSubcomponent.Factory>() {
        @Override
        public TaskDetailPresenterModule_TaskDetailFragment.TaskDetailFragmentSubcomponent.Factory get(
            ) {
          return new TaskDetailFragmentSubcomponentFactory();}
      };
      this.mapOfClassOfAndProviderOfAndroidInjectorFactoryOfProvider = MapProviderFactory.<Class<?>, AndroidInjector.Factory<?>>builder(5).put(TasksActivity.class, (Provider) DaggerAppComponent.this.tasksActivitySubcomponentFactoryProvider).put(AddEditTaskActivity.class, (Provider) DaggerAppComponent.this.addEditTaskActivitySubcomponentFactoryProvider).put(StatisticsActivity.class, (Provider) DaggerAppComponent.this.statisticsActivitySubcomponentFactoryProvider).put(TaskDetailActivity.class, (Provider) DaggerAppComponent.this.taskDetailActivitySubcomponentFactoryProvider).put(TaskDetailFragment.class, (Provider) taskDetailFragmentSubcomponentFactoryProvider).build();
      this.dispatchingAndroidInjectorProvider = DispatchingAndroidInjector_Factory.create(mapOfClassOfAndProviderOfAndroidInjectorFactoryOfProvider, MapFactory.<String, Provider<AndroidInjector.Factory<?>>>emptyMapProvider());
      this.arg0Provider = InstanceFactory.create(arg0Param);
      this.provideTaskIdProvider = DoubleCheck.provider(TaskDetailPresenterModule_ProvideTaskIdFactory.create(arg0Provider));
      this.taskDetailPresenterProvider = TaskDetailPresenter_Factory.create(provideTaskIdProvider, DaggerAppComponent.this.tasksRepositoryProvider);
      this.statitsticsPresenterProvider = DoubleCheck.provider((Provider) taskDetailPresenterProvider);
      this.taskDetailFragmentProvider = DoubleCheck.provider(TaskDetailFragment_Factory.create(dispatchingAndroidInjectorProvider, provideTaskIdProvider, statitsticsPresenterProvider));
    }

    @Override
    public void inject(TaskDetailActivity arg0) {
      injectTaskDetailActivity(arg0);}

    private TaskDetailActivity injectTaskDetailActivity(TaskDetailActivity instance) {
      DaggerAppCompatActivity_MembersInjector.injectAndroidInjector(instance, getDispatchingAndroidInjectorOfObject());
      TaskDetailActivity_MembersInjector.injectInjectedFragment(instance, taskDetailFragmentProvider.get());
      return instance;
    }

    private final class TaskDetailFragmentSubcomponentFactory implements TaskDetailPresenterModule_TaskDetailFragment.TaskDetailFragmentSubcomponent.Factory {
      @Override
      public TaskDetailPresenterModule_TaskDetailFragment.TaskDetailFragmentSubcomponent create(
          TaskDetailFragment arg0) {
        Preconditions.checkNotNull(arg0);
        return new TaskDetailFragmentSubcomponentImpl(arg0);
      }
    }

    private final class TaskDetailFragmentSubcomponentImpl implements TaskDetailPresenterModule_TaskDetailFragment.TaskDetailFragmentSubcomponent {
      private TaskDetailFragmentSubcomponentImpl(TaskDetailFragment arg0) {

      }

      @Override
      public void inject(TaskDetailFragment arg0) {
        injectTaskDetailFragment(arg0);}

      private TaskDetailFragment injectTaskDetailFragment(TaskDetailFragment instance) {
        DaggerFragment_MembersInjector.injectAndroidInjector(instance, TaskDetailActivitySubcomponentImpl.this.getDispatchingAndroidInjectorOfObject());
        TaskDetailFragment_MembersInjector.injectTaskId(instance, TaskDetailActivitySubcomponentImpl.this.provideTaskIdProvider.get());
        TaskDetailFragment_MembersInjector.injectMPresenter(instance, TaskDetailActivitySubcomponentImpl.this.statitsticsPresenterProvider.get());
        return instance;
      }
    }
  }
}
