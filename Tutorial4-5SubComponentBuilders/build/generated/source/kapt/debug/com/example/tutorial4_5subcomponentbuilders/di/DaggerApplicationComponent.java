// Generated by Dagger (https://dagger.dev).
package com.example.tutorial4_5subcomponentbuilders.di;

import android.content.Context;
import android.content.SharedPreferences;
import com.example.tutorial4_5subcomponentbuilders.MainActivity;
import com.example.tutorial4_5subcomponentbuilders.MainActivity_MembersInjector;
import com.example.tutorial4_5subcomponentbuilders.model.SingletonObject;
import com.example.tutorial4_5subcomponentbuilders.model.SingletonObject_Factory;
import com.example.tutorial4_5subcomponentbuilders.model.ToastMaker;
import dagger.internal.DoubleCheck;
import dagger.internal.InstanceFactory;
import dagger.internal.Preconditions;
import javax.inject.Provider;

@SuppressWarnings({
    "unchecked",
    "rawtypes"
})
public final class DaggerApplicationComponent implements ApplicationComponent {
  private Provider<SharedPreferences> provideSharedPreferencesProvider;

  private Provider<SingletonObject> singletonObjectProvider;

  private DaggerApplicationComponent(ApplicationModule applicationModuleParam) {

    initialize(applicationModuleParam);
  }

  public static Builder builder() {
    return new Builder();
  }

  @SuppressWarnings("unchecked")
  private void initialize(final ApplicationModule applicationModuleParam) {
    this.provideSharedPreferencesProvider = DoubleCheck.provider(ApplicationModule_ProvideSharedPreferencesFactory.create(applicationModuleParam));
    this.singletonObjectProvider = DoubleCheck.provider(SingletonObject_Factory.create());
  }

  @Override
  public ToastMakerSubComponent.Builder toastMakerBuilder() {
    return new ToastMakerSubComponentBuilder();}

  public static final class Builder {
    private ApplicationModule applicationModule;

    private Builder() {
    }

    public Builder applicationModule(ApplicationModule applicationModule) {
      this.applicationModule = Preconditions.checkNotNull(applicationModule);
      return this;
    }

    public ApplicationComponent build() {
      Preconditions.checkBuilderRequirement(applicationModule, ApplicationModule.class);
      return new DaggerApplicationComponent(applicationModule);
    }
  }

  private final class ToastMakerSubComponentBuilder implements ToastMakerSubComponent.Builder {
    private Context context;

    @Override
    public ToastMakerSubComponentBuilder context(Context context) {
      this.context = Preconditions.checkNotNull(context);
      return this;
    }

    @Override
    public ToastMakerSubComponent build() {
      Preconditions.checkBuilderRequirement(context, Context.class);
      return new ToastMakerSubComponentImpl(new ToastMakerModule(), context);
    }
  }

  private final class ToastMakerSubComponentImpl implements ToastMakerSubComponent {
    private Provider<Context> contextProvider;

    private Provider<ToastMaker> provideToastMakerProvider;

    private ToastMakerSubComponentImpl(ToastMakerModule toastMakerModuleParam,
        Context contextParam) {

      initialize(toastMakerModuleParam, contextParam);
    }

    @SuppressWarnings("unchecked")
    private void initialize(final ToastMakerModule toastMakerModuleParam,
        final Context contextParam) {
      this.contextProvider = InstanceFactory.create(contextParam);
      this.provideToastMakerProvider = DoubleCheck.provider(ToastMakerModule_ProvideToastMakerFactory.create(toastMakerModuleParam, contextProvider));
    }

    @Override
    public void inject(MainActivity mainActivity) {
      injectMainActivity(mainActivity);}

    private MainActivity injectMainActivity(MainActivity instance) {
      MainActivity_MembersInjector.injectSharedPreferences(instance, DaggerApplicationComponent.this.provideSharedPreferencesProvider.get());
      MainActivity_MembersInjector.injectToastMaker(instance, provideToastMakerProvider.get());
      MainActivity_MembersInjector.injectSingletonObject(instance, DaggerApplicationComponent.this.singletonObjectProvider.get());
      return instance;
    }
  }
}
