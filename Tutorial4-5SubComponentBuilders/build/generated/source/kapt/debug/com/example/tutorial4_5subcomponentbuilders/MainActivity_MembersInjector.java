// Generated by Dagger (https://dagger.dev).
package com.example.tutorial4_5subcomponentbuilders;

import android.content.SharedPreferences;
import com.example.tutorial4_5subcomponentbuilders.model.SingletonObject;
import com.example.tutorial4_5subcomponentbuilders.model.ToastMaker;
import dagger.MembersInjector;
import javax.inject.Provider;

@SuppressWarnings({
    "unchecked",
    "rawtypes"
})
public final class MainActivity_MembersInjector implements MembersInjector<MainActivity> {
  private final Provider<SharedPreferences> sharedPreferencesProvider;

  private final Provider<ToastMaker> toastMakerProvider;

  private final Provider<SingletonObject> singletonObjectProvider;

  public MainActivity_MembersInjector(Provider<SharedPreferences> sharedPreferencesProvider,
      Provider<ToastMaker> toastMakerProvider, Provider<SingletonObject> singletonObjectProvider) {
    this.sharedPreferencesProvider = sharedPreferencesProvider;
    this.toastMakerProvider = toastMakerProvider;
    this.singletonObjectProvider = singletonObjectProvider;
  }

  public static MembersInjector<MainActivity> create(
      Provider<SharedPreferences> sharedPreferencesProvider,
      Provider<ToastMaker> toastMakerProvider, Provider<SingletonObject> singletonObjectProvider) {
    return new MainActivity_MembersInjector(sharedPreferencesProvider, toastMakerProvider, singletonObjectProvider);}

  @Override
  public void injectMembers(MainActivity instance) {
    injectSharedPreferences(instance, sharedPreferencesProvider.get());
    injectToastMaker(instance, toastMakerProvider.get());
    injectSingletonObject(instance, singletonObjectProvider.get());
  }

  public static void injectSharedPreferences(MainActivity instance,
      SharedPreferences sharedPreferences) {
    instance.sharedPreferences = sharedPreferences;
  }

  public static void injectToastMaker(MainActivity instance, ToastMaker toastMaker) {
    instance.toastMaker = toastMaker;
  }

  public static void injectSingletonObject(MainActivity instance, SingletonObject singletonObject) {
    instance.singletonObject = singletonObject;
  }
}
