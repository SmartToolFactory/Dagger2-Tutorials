// Generated by Dagger (https://dagger.dev).
package com.example.tutorial4_1dependentcomponent.di;

import com.example.tutorial4_1dependentcomponent.model.Motor;
import dagger.internal.Factory;
import dagger.internal.Preconditions;

@SuppressWarnings({
    "unchecked",
    "rawtypes"
})
public final class MotorModule_ProvideMotorFactory implements Factory<Motor> {
  private final MotorModule module;

  public MotorModule_ProvideMotorFactory(MotorModule module) {
    this.module = module;
  }

  @Override
  public Motor get() {
    return provideMotor(module);
  }

  public static MotorModule_ProvideMotorFactory create(MotorModule module) {
    return new MotorModule_ProvideMotorFactory(module);
  }

  public static Motor provideMotor(MotorModule instance) {
    return Preconditions.checkNotNull(instance.provideMotor(), "Cannot return null from a non-@Nullable @Provides method");
  }
}
