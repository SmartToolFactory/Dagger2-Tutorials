// Generated by Dagger (https://dagger.dev).
package com.example.tutorial4_1dependentcomponent.di;

import com.example.tutorial4_1dependentcomponent.model.Motor;
import com.example.tutorial4_1dependentcomponent.model.Vehicle;
import dagger.internal.Factory;
import dagger.internal.Preconditions;
import javax.inject.Provider;

@SuppressWarnings({
    "unchecked",
    "rawtypes"
})
public final class VehicleModule_ProvideVehicleFactory implements Factory<Vehicle> {
  private final VehicleModule module;

  private final Provider<Motor> motorProvider;

  public VehicleModule_ProvideVehicleFactory(VehicleModule module, Provider<Motor> motorProvider) {
    this.module = module;
    this.motorProvider = motorProvider;
  }

  @Override
  public Vehicle get() {
    return provideVehicle(module, motorProvider.get());
  }

  public static VehicleModule_ProvideVehicleFactory create(VehicleModule module,
      Provider<Motor> motorProvider) {
    return new VehicleModule_ProvideVehicleFactory(module, motorProvider);
  }

  public static Vehicle provideVehicle(VehicleModule instance, Motor motor) {
    return Preconditions.checkNotNull(instance.provideVehicle(motor), "Cannot return null from a non-@Nullable @Provides method");
  }
}
