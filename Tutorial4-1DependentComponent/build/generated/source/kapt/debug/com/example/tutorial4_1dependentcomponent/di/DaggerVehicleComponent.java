// Generated by Dagger (https://dagger.dev).
package com.example.tutorial4_1dependentcomponent.di;

import com.example.tutorial4_1dependentcomponent.MainActivity;
import com.example.tutorial4_1dependentcomponent.MainActivity_MembersInjector;
import com.example.tutorial4_1dependentcomponent.model.Vehicle;
import dagger.internal.Preconditions;

@SuppressWarnings({
    "unchecked",
    "rawtypes"
})
public final class DaggerVehicleComponent implements VehicleComponent {
  private final MotorComponent motorComponent;

  private final VehicleModule vehicleModule;

  private DaggerVehicleComponent(VehicleModule vehicleModuleParam,
      MotorComponent motorComponentParam) {
    this.motorComponent = motorComponentParam;
    this.vehicleModule = vehicleModuleParam;
  }

  public static Builder builder() {
    return new Builder();
  }

  private Vehicle getVehicle() {
    return VehicleModule_ProvideVehicleFactory.provideVehicle(vehicleModule, Preconditions.checkNotNull(motorComponent.motor(), "Cannot return null from a non-@Nullable component method"));}

  @Override
  public void inject(MainActivity mainActivity) {
    injectMainActivity(mainActivity);}

  private MainActivity injectMainActivity(MainActivity instance) {
    MainActivity_MembersInjector.injectMVehicle(instance, getVehicle());
    return instance;
  }

  public static final class Builder {
    private VehicleModule vehicleModule;

    private MotorComponent motorComponent;

    private Builder() {
    }

    public Builder vehicleModule(VehicleModule vehicleModule) {
      this.vehicleModule = Preconditions.checkNotNull(vehicleModule);
      return this;
    }

    public Builder motorComponent(MotorComponent motorComponent) {
      this.motorComponent = Preconditions.checkNotNull(motorComponent);
      return this;
    }

    public VehicleComponent build() {
      if (vehicleModule == null) {
        this.vehicleModule = new VehicleModule();
      }
      Preconditions.checkBuilderRequirement(motorComponent, MotorComponent.class);
      return new DaggerVehicleComponent(vehicleModule, motorComponent);
    }
  }
}
