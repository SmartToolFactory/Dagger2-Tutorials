// Generated by Dagger (https://dagger.dev).
package com.example.tutorial4_1dependentcomponent.di;

import com.example.tutorial4_1dependentcomponent.model.Motor;
import dagger.internal.Preconditions;

@SuppressWarnings({
    "unchecked",
    "rawtypes"
})
public final class DaggerMotorComponent implements MotorComponent {
  private final MotorModule motorModule;

  private DaggerMotorComponent(MotorModule motorModuleParam) {
    this.motorModule = motorModuleParam;
  }

  public static Builder builder() {
    return new Builder();
  }

  public static MotorComponent create() {
    return new Builder().build();
  }

  @Override
  public Motor motor() {
    return MotorModule_ProvideMotorFactory.provideMotor(motorModule);}

  public static final class Builder {
    private MotorModule motorModule;

    private Builder() {
    }

    public Builder motorModule(MotorModule motorModule) {
      this.motorModule = Preconditions.checkNotNull(motorModule);
      return this;
    }

    public MotorComponent build() {
      if (motorModule == null) {
        this.motorModule = new MotorModule();
      }
      return new DaggerMotorComponent(motorModule);
    }
  }
}
