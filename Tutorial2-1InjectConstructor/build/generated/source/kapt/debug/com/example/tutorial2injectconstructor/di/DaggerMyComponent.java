// Generated by Dagger (https://dagger.dev).
package com.example.tutorial2injectconstructor.di;

import android.content.SharedPreferences;
import com.example.tutorial2injectconstructor.MainActivity;
import com.example.tutorial2injectconstructor.MainActivity_MembersInjector;
import com.example.tutorial2injectconstructor.model.MySharedPreferences;
import com.example.tutorial2injectconstructor.model.MySharedPreferences_Factory;
import dagger.internal.DoubleCheck;
import dagger.internal.Preconditions;
import javax.inject.Provider;

@SuppressWarnings({
    "unchecked",
    "rawtypes"
})
public final class DaggerMyComponent implements MyComponent {
  private Provider<SharedPreferences> provideSharedPreferencesProvider;

  private Provider<MySharedPreferences> mySharedPreferencesProvider;

  private DaggerMyComponent(SharedPreferencesModule sharedPreferencesModuleParam) {

    initialize(sharedPreferencesModuleParam);
  }

  public static Builder builder() {
    return new Builder();
  }

  @SuppressWarnings("unchecked")
  private void initialize(final SharedPreferencesModule sharedPreferencesModuleParam) {
    this.provideSharedPreferencesProvider = DoubleCheck.provider(SharedPreferencesModule_ProvideSharedPreferencesFactory.create(sharedPreferencesModuleParam));
    this.mySharedPreferencesProvider = DoubleCheck.provider(MySharedPreferences_Factory.create(provideSharedPreferencesProvider));
  }

  @Override
  public void inject(MainActivity mainActivity) {
    injectMainActivity(mainActivity);}

  private MainActivity injectMainActivity(MainActivity instance) {
    MainActivity_MembersInjector.injectMySharedPreferences(instance, mySharedPreferencesProvider.get());
    return instance;
  }

  public static final class Builder {
    private SharedPreferencesModule sharedPreferencesModule;

    private Builder() {
    }

    public Builder sharedPreferencesModule(SharedPreferencesModule sharedPreferencesModule) {
      this.sharedPreferencesModule = Preconditions.checkNotNull(sharedPreferencesModule);
      return this;
    }

    public MyComponent build() {
      Preconditions.checkBuilderRequirement(sharedPreferencesModule, SharedPreferencesModule.class);
      return new DaggerMyComponent(sharedPreferencesModule);
    }
  }
}
