// Generated by Dagger (https://dagger.dev).
package com.example.tutorial1daggerbasics2.di;

import com.example.tutorial1daggerbasics2.model.Vehicle;
import dagger.internal.DoubleCheck;
import dagger.internal.Preconditions;
import javax.inject.Provider;

@SuppressWarnings({
    "unchecked",
    "rawtypes"
})
public final class DaggerVehicleComponent implements VehicleComponent {
  private Provider<Vehicle> provideVehicleProvider;

  private DaggerVehicleComponent(VehicleModule vehicleModuleParam) {

    initialize(vehicleModuleParam);
  }

  public static Builder builder() {
    return new Builder();
  }

  public static VehicleComponent create() {
    return new Builder().build();
  }

  @SuppressWarnings("unchecked")
  private void initialize(final VehicleModule vehicleModuleParam) {
    this.provideVehicleProvider = DoubleCheck.provider(VehicleModule_ProvideVehicleFactory.create(vehicleModuleParam));
  }

  @Override
  public Vehicle provideVehicle() {
    return provideVehicleProvider.get();}

  public static final class Builder {
    private VehicleModule vehicleModule;

    private Builder() {
    }

    public Builder vehicleModule(VehicleModule vehicleModule) {
      this.vehicleModule = Preconditions.checkNotNull(vehicleModule);
      return this;
    }

    public VehicleComponent build() {
      if (vehicleModule == null) {
        this.vehicleModule = new VehicleModule();
      }
      return new DaggerVehicleComponent(vehicleModule);
    }
  }
}
