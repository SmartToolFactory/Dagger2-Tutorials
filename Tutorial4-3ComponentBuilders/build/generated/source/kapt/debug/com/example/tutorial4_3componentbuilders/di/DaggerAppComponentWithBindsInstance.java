// Generated by Dagger (https://dagger.dev).
package com.example.tutorial4_3componentbuilders.di;

import android.app.Application;
import android.content.SharedPreferences;
import com.example.tutorial4_3componentbuilders.MainActivity;
import com.example.tutorial4_3componentbuilders.MainActivity_MembersInjector;
import dagger.internal.DoubleCheck;
import dagger.internal.InstanceFactory;
import dagger.internal.Preconditions;
import javax.inject.Provider;

@SuppressWarnings({
    "unchecked",
    "rawtypes"
})
public final class DaggerAppComponentWithBindsInstance implements AppComponentWithBindsInstance {
  private Provider<Application> applicationProvider;

  private Provider<SharedPreferences> providePreferencesProvider;

  private DaggerAppComponentWithBindsInstance(
      AppModuleWithBindsInstance appModuleWithBindsInstanceParam, Application applicationParam) {

    initialize(appModuleWithBindsInstanceParam, applicationParam);
  }

  public static AppComponentWithBindsInstance.Builder builder() {
    return new Builder();
  }

  @SuppressWarnings("unchecked")
  private void initialize(final AppModuleWithBindsInstance appModuleWithBindsInstanceParam,
      final Application applicationParam) {
    this.applicationProvider = InstanceFactory.create(applicationParam);
    this.providePreferencesProvider = DoubleCheck.provider(AppModuleWithBindsInstance_ProvidePreferencesFactory.create(appModuleWithBindsInstanceParam, applicationProvider));
  }

  @Override
  public void inject(MainActivity mainActivity) {
    injectMainActivity(mainActivity);}

  private MainActivity injectMainActivity(MainActivity instance) {
    MainActivity_MembersInjector.injectSharedPreferences(instance, providePreferencesProvider.get());
    return instance;
  }

  private static final class Builder implements AppComponentWithBindsInstance.Builder {
    private Application application;

    @Override
    public Builder application(Application application) {
      this.application = Preconditions.checkNotNull(application);
      return this;
    }

    @Override
    public AppComponentWithBindsInstance build() {
      Preconditions.checkBuilderRequirement(application, Application.class);
      return new DaggerAppComponentWithBindsInstance(new AppModuleWithBindsInstance(), application);
    }
  }
}
