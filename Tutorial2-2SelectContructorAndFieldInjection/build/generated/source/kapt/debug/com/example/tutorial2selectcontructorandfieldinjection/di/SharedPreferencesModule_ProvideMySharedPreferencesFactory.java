// Generated by Dagger (https://dagger.dev).
package com.example.tutorial2selectcontructorandfieldinjection.di;

import com.example.tutorial2selectcontructorandfieldinjection.model.MySharedPreferences;
import dagger.internal.Factory;
import dagger.internal.Preconditions;

@SuppressWarnings({
    "unchecked",
    "rawtypes"
})
public final class SharedPreferencesModule_ProvideMySharedPreferencesFactory implements Factory<MySharedPreferences> {
  private final SharedPreferencesModule module;

  public SharedPreferencesModule_ProvideMySharedPreferencesFactory(SharedPreferencesModule module) {
    this.module = module;
  }

  @Override
  public MySharedPreferences get() {
    return provideMySharedPreferences(module);
  }

  public static SharedPreferencesModule_ProvideMySharedPreferencesFactory create(
      SharedPreferencesModule module) {
    return new SharedPreferencesModule_ProvideMySharedPreferencesFactory(module);
  }

  public static MySharedPreferences provideMySharedPreferences(SharedPreferencesModule instance) {
    return Preconditions.checkNotNull(instance.provideMySharedPreferences(), "Cannot return null from a non-@Nullable @Provides method");
  }
}
